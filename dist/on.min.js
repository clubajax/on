!function(root, factory) {
"function" == typeof customLoader ? customLoader(factory, "on") : "function" == typeof define && define.amd ? define([], factory) : "object" == typeof exports ? module.exports = factory() : root.returnExports = window.on = factory();
}(this, function() {
"use strict";
function on(node, eventName, filter, handler) {
"string" == typeof node && (node = getNodeById(node));
var callback = makeCallback(node, filter, handler);
if ("function" == typeof eventName) return eventName(node, callback);
var keyEvent = /^(keyup|keydown):(.+)$/.exec(eventName);
return keyEvent ? onKeyEvent(keyEvent[1], new RegExp(keyEvent[2].split(",").join("|")))(node, callback) : /,/.test(eventName) ? on.makeMultiHandle(eventName.split(",").map(function(name) {
return name.trim();
}).filter(function(name) {
return name;
}).map(function(name) {
return on(node, name, callback);
})) : Object.prototype.hasOwnProperty.call(on.events, eventName) ? on.events[eventName](node, callback) : "load" === eventName && "img" === node.tagName.toLowerCase() ? onImageLoad(node, callback) : "wheel" !== eventName || (callback = normalizeWheelEvent(callback), 
hasWheel) ? (/^key/.test(eventName) && (callback = normalizeKeyEvent(callback)), 
on.onDomEvent(node, eventName, callback)) : on.makeMultiHandle([ on(node, "DOMMouseScroll", callback), on(node, "mousewheel", callback) ]);
}
function onDomEvent(node, eventName, callback) {
return node.addEventListener(eventName, callback, !1), {
remove: function() {
node.removeEventListener(eventName, callback, !1), node = callback = null, this.remove = this.pause = this.resume = function() {};
},
pause: function() {
node.removeEventListener(eventName, callback, !1);
},
resume: function() {
node.addEventListener(eventName, callback, !1);
}
};
}
function onImageLoad(node, callback) {
function onImageLoad(e) {
var interval = setInterval(function() {
(node.naturalWidth || node.naturalHeight) && (clearInterval(interval), e.width = e.naturalWidth = node.naturalWidth, 
e.height = e.naturalHeight = node.naturalHeight, callback(e));
}, 100);
handle.remove();
}
var handle = on.makeMultiHandle([ on.onDomEvent(node, "load", onImageLoad), on(node, "error", callback) ]);
return handle;
}
function onKeyEvent(keyEventName, re) {
return function(node, callback) {
return on(node, keyEventName, function(e) {
re.test(e.key) && callback(e);
});
};
}
function closest(element, selector, parent) {
for (;element; ) {
if (element[on.matches] && element[on.matches](selector)) return element;
if (element === parent) break;
element = element.parentElement;
}
return null;
}
function mix(object, value) {
if (!value) return object;
if ("object" == typeof value) for (var key in value) INVALID_PROPS[key] || (object[key] = value[key]); else object.value = value;
return object;
}
function normalizeKeyEvent(callback) {
return function(e) {
if (ieKeys[e.key]) {
var fakeEvent = mix({}, e);
fakeEvent.key = ieKeys[e.key], callback(fakeEvent);
} else callback(e);
};
}
function normalizeWheelEvent(callback) {
return function(e) {
XLR8 += FACTOR;
var deltaY = Math.max(-1, Math.min(1, e.wheelDeltaY || e.deltaY)), deltaX = Math.max(-10, Math.min(10, e.wheelDeltaX || e.deltaX));
deltaY = deltaY <= 0 ? deltaY - XLR8 : deltaY + XLR8, e.delta = deltaY, e.wheelY = deltaY, 
e.wheelX = deltaX, clearTimeout(mouseWheelHandle), mouseWheelHandle = setTimeout(function() {
XLR8 = 0;
}, 300), callback(e);
};
}
function closestFilter(element, selector) {
return function(e) {
return on.closest(e.target, selector, element);
};
}
function makeMultiHandle(handles) {
return {
state: "resumed",
remove: function() {
handles.forEach(function(h) {
h.remove ? h.remove() : "function" == typeof h && h();
}), handles = [], this.remove = this.pause = this.resume = function() {}, this.state = "removed";
},
pause: function() {
handles.forEach(function(h) {
h.pause && h.pause();
}), this.state = "paused";
},
resume: function() {
handles.forEach(function(h) {
h.resume && h.resume();
}), this.state = "resumed";
}
};
}
function getNodeById(id) {
var node = document.getElementById(id);
return node || console.error("`on` Could not find:", id), node;
}
function makeCallback(node, filter, handler) {
return filter && handler ? ("string" == typeof filter && (filter = closestFilter(node, filter)), 
function(e) {
var result = filter(e);
result && (e.filteredTarget = result, handler(e, result));
}) : filter || handler;
}
function getDoc(node) {
return node === document || node === window ? document : node.ownerDocument;
}
on.events = {
button: function(node, callback) {
return on.makeMultiHandle([ on(node, "click", callback), on(node, "keyup:Enter", callback) ]);
},
clickoff: function(node, callback) {
var bHandle = on(node.ownerDocument.documentElement, "click", function(e) {
var target = e.target;
1 !== target.nodeType && (target = target.parentNode), target && !node.contains(target) && callback(e);
}), handle = {
state: "resumed",
resume: function() {
setTimeout(function() {
bHandle.resume();
}, 100), this.state = "resumed";
},
pause: function() {
bHandle.pause(), this.state = "paused";
},
remove: function() {
bHandle.remove(), this.state = "removed";
}
};
return handle.pause(), handle;
}
};
var matches, hasWheel = function() {
var isIE = navigator.userAgent.indexOf("Trident") > -1, div = document.createElement("div");
return "onwheel" in div || "wheel" in div || isIE && document.implementation.hasFeature("Events.wheel", "3.0");
}();
[ "matches", "matchesSelector", "webkit", "moz", "ms", "o" ].some(function(name) {
return name.length < 7 && (name += "MatchesSelector"), !!Element.prototype[name] && (matches = name, 
!0);
});
var mouseWheelHandle, INVALID_PROPS = {
isTrusted: 1
}, ieKeys = {
Up: "ArrowUp",
Down: "ArrowDown",
Left: "ArrowLeft",
Right: "ArrowRight",
Esc: "Escape",
Spacebar: " ",
Win: "Command"
}, FACTOR = navigator.userAgent.indexOf("Windows") > -1 ? 10 : .1, XLR8 = 0;
return on.once = function(node, eventName, filter, callback) {
var h;
return h = filter && callback ? on(node, eventName, filter, function() {
callback.apply(window, arguments), h.remove();
}) : on(node, eventName, function() {
filter.apply(window, arguments), h.remove();
});
}, on.emit = function(node, eventName, value) {
node = "string" == typeof node ? getNodeById(node) : node;
var event = getDoc(node).createEvent("HTMLEvents");
return event.initEvent(eventName, !0, !0), node.dispatchEvent(mix(event, value));
}, on.fire = function(node, eventName, eventDetail, bubbles) {
node = "string" == typeof node ? getNodeById(node) : node;
var event = getDoc(node).createEvent("CustomEvent");
return event.initCustomEvent(eventName, !!bubbles, !0, eventDetail), node.dispatchEvent(event);
}, on.isAlphaNumeric = function(str) {
return /^[0-9a-z]$/i.test(str);
}, on.makeMultiHandle = makeMultiHandle, on.onDomEvent = onDomEvent, on.closest = closest, 
on.matches = matches, on;
});