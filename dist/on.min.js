!function() {
function polyfill() {
if (!("KeyboardEvent" in window) || "key" in KeyboardEvent.prototype) return !1;
var proto = {
get: function(x) {
var key = keyboardeventKeyPolyfill.keys[this.which || this.keyCode];
return Array.isArray(key) && (key = key[+this.shiftKey]), key;
}
};
return Object.defineProperty(KeyboardEvent.prototype, "key", proto), proto;
}
var i, keyboardeventKeyPolyfill = {
polyfill: polyfill,
keys: {
3: "Cancel",
6: "Help",
8: "Backspace",
9: "Tab",
12: "Clear",
13: "Enter",
16: "Shift",
17: "Control",
18: "Alt",
19: "Pause",
20: "CapsLock",
27: "Escape",
28: "Convert",
29: "NonConvert",
30: "Accept",
31: "ModeChange",
32: " ",
33: "PageUp",
34: "PageDown",
35: "End",
36: "Home",
37: "ArrowLeft",
38: "ArrowUp",
39: "ArrowRight",
40: "ArrowDown",
41: "Select",
42: "Print",
43: "Execute",
44: "PrintScreen",
45: "Insert",
46: "Delete",
48: [ "0", ")" ],
49: [ "1", "!" ],
50: [ "2", "@" ],
51: [ "3", "#" ],
52: [ "4", "$" ],
53: [ "5", "%" ],
54: [ "6", "^" ],
55: [ "7", "&" ],
56: [ "8", "*" ],
57: [ "9", "(" ],
91: "OS",
93: "ContextMenu",
144: "NumLock",
145: "ScrollLock",
181: "VolumeMute",
182: "VolumeDown",
183: "VolumeUp",
186: [ ";", ":" ],
187: [ "=", "+" ],
188: [ ",", "<" ],
189: [ "-", "_" ],
190: [ ".", ">" ],
191: [ "/", "?" ],
192: [ "`", "~" ],
219: [ "[", "{" ],
220: [ "\\", "|" ],
221: [ "]", "}" ],
222: [ "'", '"' ],
224: "Meta",
225: "AltGraph",
246: "Attn",
247: "CrSel",
248: "ExSel",
249: "EraseEof",
250: "Play",
251: "ZoomOut"
}
};
for (i = 1; i < 25; i++) keyboardeventKeyPolyfill.keys[111 + i] = "F" + i;
var letter = "";
for (i = 65; i < 91; i++) letter = String.fromCharCode(i), keyboardeventKeyPolyfill.keys[i] = [ letter.toLowerCase(), letter.toUpperCase() ];
"function" == typeof define && define.amd ? define("keyboardevent-key-polyfill", keyboardeventKeyPolyfill) : "undefined" != typeof exports && "undefined" != typeof module ? module.exports = keyboardeventKeyPolyfill : window && (window.keyboardeventKeyPolyfill = keyboardeventKeyPolyfill);
}(), function(root, factory) {
"function" == typeof customLoader ? customLoader(factory, "on") : "function" == typeof define && define.amd ? define([], factory) : "object" == typeof exports ? module.exports = factory() : (root.returnExports = factory(), 
window.on = factory());
}(this, function() {
"use strict";
function hasWheelTest() {
var isIE = navigator.userAgent.indexOf("Trident") > -1, div = document.createElement("div");
return "onwheel" in div || "wheel" in div || isIE && document.implementation.hasFeature("Events.wheel", "3.0");
}
function closest(element, selector, parent) {
for (;element; ) {
if (element[matches] && element[matches](selector)) return element;
if (element === parent) break;
element = element.parentElement;
}
return null;
}
function closestFilter(element, selector) {
return function(e) {
return closest(e.target, selector, element);
};
}
function makeMultiHandle(handles) {
return {
remove: function() {
handles.forEach(function(h) {
h.remove ? h.remove() : "function" == typeof h && h();
}), handles = [], this.remove = this.pause = this.resume = function() {};
},
pause: function() {
handles.forEach(function(h) {
h.pause && h.pause();
});
},
resume: function() {
handles.forEach(function(h) {
h.resume && h.resume();
});
}
};
}
function onClickoff(node, callback) {
var handle, bHandle = on(document.body, "click", function(event) {
node.contains(event.target) || callback(event);
});
return handle = {
resume: function() {
setTimeout(function() {
bHandle.resume();
}, 100);
},
pause: function() {
bHandle.pause();
},
remove: function() {
bHandle.remove();
}
}, handle.pause(), handle;
}
function onImageLoad(img, callback) {
function onImageLoad(e) {
var h = setInterval(function() {
img.naturalWidth && (e.width = img.naturalWidth, e.naturalWidth = img.naturalWidth, 
e.height = img.naturalHeight, e.naturalHeight = img.naturalHeight, callback(e), 
clearInterval(h));
}, 100);
img.removeEventListener("load", onImageLoad), img.removeEventListener("error", callback);
}
return img.addEventListener("load", onImageLoad), img.addEventListener("error", callback), 
{
pause: function() {},
resume: function() {},
remove: function() {
img.removeEventListener("load", onImageLoad), img.removeEventListener("error", callback);
}
};
}
function getNode(str) {
if ("string" != typeof str) return str;
var node;
return node = /\#|\.|\s/.test(str) ? document.body.querySelector(str) : document.getElementById(str), 
node || console.error("localLib/on Could not find:", str), node;
}
function normalizeWheelEvent(callback) {
return function(e) {
XLR8 += FACTOR;
var deltaY = Math.max(-1, Math.min(1, e.wheelDeltaY || e.deltaY)), deltaX = Math.max(-10, Math.min(10, e.wheelDeltaX || e.deltaX));
deltaY = deltaY <= 0 ? deltaY - XLR8 : deltaY + XLR8, e.delta = deltaY, e.wheelY = deltaY, 
e.wheelX = deltaX, clearTimeout(mouseWheelHandle), mouseWheelHandle = setTimeout(function() {
XLR8 = 0;
}, 300), callback(e);
};
}
function on(node, eventType, filter, handler) {
var callback, handles, handle;
if (/,/.test(eventType)) return handles = [], eventType.split(",").forEach(function(eStr) {
handles.push(on(node, eStr.trim(), filter, handler));
}), makeMultiHandle(handles);
if (node = getNode(node), filter && handler ? ("string" == typeof filter && (filter = closestFilter(node, filter)), 
callback = function(e) {
var result = filter(e);
result && (e.filteredTarget = result, handler(e, result));
}) : callback = filter || handler, "clickoff" === eventType) return onClickoff(node, callback);
if ("load" === eventType && "img" === node.localName) return onImageLoad(node, callback);
if ("wheel" === eventType) {
if (!hasWheel) return makeMultiHandle([ on(node, "DOMMouseScroll", normalizeWheelEvent(callback)), on(node, "mousewheel", normalizeWheelEvent(callback)) ]);
callback = normalizeWheelEvent(callback);
}
return node.addEventListener(eventType, callback, !1), handle = {
remove: function() {
node.removeEventListener(eventType, callback, !1), node = callback = null, this.remove = this.pause = this.resume = function() {};
},
pause: function() {
node.removeEventListener(eventType, callback, !1);
},
resume: function() {
node.addEventListener(eventType, callback, !1);
}
};
}
function mix(object, value) {
return "object" == typeof value ? Object.keys(value).forEach(function(key) {
INVALID_PROPS[key] || (object[key] = value[key]);
}) : object.value = value, object;
}
try {
window.keyboardeventKeyPolyfill.polyfill();
} catch (e) {
console.error("on/src/key-poly is required for the event.key property");
}
var INVALID_PROPS, matches, mouseWheelHandle, hasWheel = hasWheelTest(), isWin = navigator.userAgent.indexOf("Windows") > -1, FACTOR = isWin ? 10 : .1, XLR8 = 0;
return [ "matches", "matchesSelector", "webkit", "moz", "ms", "o" ].some(function(name) {
return name.length < 7 && (name += "MatchesSelector"), !!Element.prototype[name] && (matches = name, 
!0);
}), on.once = function(node, eventType, filter, callback) {
var h;
return h = filter && callback ? on(node, eventType, filter, function() {
callback.apply(window, arguments), h.remove();
}) : on(node, eventType, function() {
filter.apply(window, arguments), h.remove();
});
}, INVALID_PROPS = {
isTrusted: 1
}, on.emit = function(node, eventName, value) {
node = getNode(node);
var event = document.createEvent("HTMLEvents");
return event.initEvent(eventName, !0, !0), node.dispatchEvent(mix(event, value));
}, on.fire = function(node, eventName, eventDetail, bubbles) {
var event = document.createEvent("CustomEvent");
return event.initCustomEvent(eventName, !!bubbles, !0, eventDetail), node.dispatchEvent(event);
}, on.makeMultiHandle = makeMultiHandle, on.closest = closest, on.matches = matches, 
on;
});