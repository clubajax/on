!function(root, factory) {
"function" == typeof customLoader ? customLoader(factory, "on") : "function" == typeof define && define.amd ? define([], factory) : "object" == typeof exports ? module.exports = factory() : (root.returnExports = factory(), 
window.on = factory());
}(this, function() {
"use strict";
function closest(element, selector, parent) {
for (;element; ) {
if (element[matches] && element[matches](selector)) return element;
if (element === parent) break;
element = element.parentElement;
}
return null;
}
function closestFilter(element, selector) {
return function(e) {
return closest(e.target, selector, element);
};
}
function makeMultiHandle(handles) {
return {
remove: function() {
handles.forEach(function(h) {
h.remove ? h.remove() : "function" == typeof h && h();
}), handles = [], this.remove = this.pause = this.resume = function() {};
},
pause: function() {
handles.forEach(function(h) {
h.pause && h.pause();
});
},
resume: function() {
handles.forEach(function(h) {
h.resume && h.resume();
});
}
};
}
function onClickoff(node, callback) {
var handle, bHandle = on(document.body, "click", function(event) {
var target = event.target;
1 !== target.nodeType && (target = target.parentNode), target && !node.contains(target) && callback(event);
});
return handle = {
resume: function() {
setTimeout(function() {
bHandle.resume();
}, 100);
},
pause: function() {
bHandle.pause();
},
remove: function() {
bHandle.remove();
}
}, handle.pause(), handle;
}
function onImageLoad(img, callback) {
function onImageLoad(e) {
var h = setInterval(function() {
img.naturalWidth && (e.width = img.naturalWidth, e.naturalWidth = img.naturalWidth, 
e.height = img.naturalHeight, e.naturalHeight = img.naturalHeight, callback(e), 
clearInterval(h));
}, 100);
img.removeEventListener("load", onImageLoad), img.removeEventListener("error", callback);
}
return img.addEventListener("load", onImageLoad), img.addEventListener("error", callback), 
{
pause: function() {},
resume: function() {},
remove: function() {
img.removeEventListener("load", onImageLoad), img.removeEventListener("error", callback);
}
};
}
function getNode(str) {
if ("string" != typeof str) return str;
var node = document.getElementById(str);
return node || console.error("`on` Could not find:", str), node;
}
function normalizeKeyEvent(callback) {
return function(e) {
if (ieKeys[e.key]) {
var fakeEvent = mix({}, e);
fakeEvent.key = ieKeys[e.key], callback(fakeEvent);
} else callback(e);
};
}
function normalizeWheelEvent(callback) {
return function(e) {
XLR8 += FACTOR;
var deltaY = Math.max(-1, Math.min(1, e.wheelDeltaY || e.deltaY)), deltaX = Math.max(-10, Math.min(10, e.wheelDeltaX || e.deltaX));
deltaY = deltaY <= 0 ? deltaY - XLR8 : deltaY + XLR8, e.delta = deltaY, e.wheelY = deltaY, 
e.wheelX = deltaX, clearTimeout(mouseWheelHandle), mouseWheelHandle = setTimeout(function() {
XLR8 = 0;
}, 300), callback(e);
};
}
function isMultiKey(eventName) {
return /,/.test(eventName) && !/click|mouse|resize|scroll/.test(eventName);
}
function keysToRegExp(eventName) {
return new RegExp(eventName.replace("keydown:", "").replace("keyup:", "").split(",").join("|"));
}
function on(node, eventName, filter, handler) {
var callback, handles, handle, keyRegExp;
if (isMultiKey(eventName) && (keyRegExp = keysToRegExp(eventName), callback = function(e) {
keyRegExp.test(e.key) && (handler || filter)(e);
}, eventName = /keydown/.test(eventName) ? "keydown" : "keyup"), /,/.test(eventName)) return handles = [], 
eventName.split(",").forEach(function(eStr) {
handles.push(on(node, eStr.trim(), filter, handler));
}), makeMultiHandle(handles);
if ("button" === eventName) return makeMultiHandle([ on(node, "click", filter, handle), on(node, "keyup:Enter", filter, handle) ]);
if (node = getNode(node), filter && handler ? ("string" == typeof filter && (filter = closestFilter(node, filter)), 
callback = function(e) {
var result = filter(e);
result && (e.filteredTarget = result, handler(e, result));
}) : callback || (callback = filter || handler), "clickoff" === eventName) return onClickoff(node, callback);
if ("load" === eventName && "img" === node.localName) return onImageLoad(node, callback);
if ("wheel" === eventName) {
if (!hasWheel) return makeMultiHandle([ on(node, "DOMMouseScroll", normalizeWheelEvent(callback)), on(node, "mousewheel", normalizeWheelEvent(callback)) ]);
callback = normalizeWheelEvent(callback);
}
return /key/.test(eventName) && (callback = normalizeKeyEvent(callback)), node.addEventListener(eventName, callback, !1), 
handle = {
remove: function() {
node.removeEventListener(eventName, callback, !1), node = callback = null, this.remove = this.pause = this.resume = function() {};
},
pause: function() {
node.removeEventListener(eventName, callback, !1);
},
resume: function() {
node.addEventListener(eventName, callback, !1);
}
};
}
function mix(object, value) {
if (!value) return object;
if ("object" == typeof value) for (var key in value) INVALID_PROPS[key] || "function" == typeof value[key] || (object[key] = value[key]); else object.value = value;
return object;
}
var INVALID_PROPS, matches, mouseWheelHandle, hasWheel = function() {
var isIE = navigator.userAgent.indexOf("Trident") > -1, div = document.createElement("div");
return "onwheel" in div || "wheel" in div || isIE && document.implementation.hasFeature("Events.wheel", "3.0");
}(), isWin = navigator.userAgent.indexOf("Windows") > -1, FACTOR = isWin ? 10 : .1, XLR8 = 0;
[ "matches", "matchesSelector", "webkit", "moz", "ms", "o" ].some(function(name) {
return name.length < 7 && (name += "MatchesSelector"), !!Element.prototype[name] && (matches = name, 
!0);
});
var ieKeys = {
Up: "ArrowUp",
Down: "ArrowDown",
Left: "ArrowLeft",
Right: "ArrowRight",
Esc: "Escape",
Spacebar: " ",
Win: "Command"
};
return on.once = function(node, eventName, filter, callback) {
var h;
return h = filter && callback ? on(node, eventName, filter, function() {
callback.apply(window, arguments), h.remove();
}) : on(node, eventName, function() {
filter.apply(window, arguments), h.remove();
});
}, INVALID_PROPS = {
isTrusted: 1
}, on.emit = function(node, eventName, value) {
node = getNode(node);
var event = document.createEvent("HTMLEvents");
return event.initEvent(eventName, !0, !0), node.dispatchEvent(mix(event, value));
}, on.fire = function(node, eventName, eventDetail, bubbles) {
var event = document.createEvent("CustomEvent");
return event.initCustomEvent(eventName, !!bubbles, !0, eventDetail), node.dispatchEvent(event);
}, on.isAlphaNumeric = function(str) {
if (str.length > 1) return !1;
if (" " === str) return !1;
if (!isNaN(Number(str))) return !0;
var code = str.toLowerCase().charCodeAt(0);
return code >= 97 && code <= 122;
}, on.makeMultiHandle = makeMultiHandle, on.closest = closest, on.matches = matches, 
on;
});